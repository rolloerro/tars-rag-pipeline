# fdtpromo_bot.py
import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from rag.rag_pipeline import RAGSearch

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG
rag = RAGSearch()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –§–î–¢, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def answer_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    response = rag.query(question)
    # –æ–≥—Ä–∞–Ω–∏—á–∏–º –æ—Ç–≤–µ—Ç 500 —Å–∏–º–≤–æ–ª–∞–º–∏
    for chunk in [response[i:i+500] for i in range(0, len(response), 500)]:
        await update.message.reply_text(chunk)

if __name__ == "__main__":
    if not TOKEN:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")
    
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_question))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    app.run_polling()
