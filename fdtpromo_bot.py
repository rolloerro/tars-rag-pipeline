import os
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from sentence_transformers import SentenceTransformer, util
from PyPDF2 import PdfReader
from dotenv import load_dotenv  # pip install python-dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ü—É—Ç—å –∫ PDF
PDF_PATH = os.path.expanduser("~/Desktop/001_onco.pdf")

# –ó–∞–≥—Ä—É–∂–∞–µ–º PDF
def load_pdf(path):
    reader = PdfReader(path)
    sentences = []
    for page in reader.pages:
        text = page.extract_text()
        if text:
            sentences.extend(text.split('. '))
    return sentences

sentences = load_pdf(PDF_PATH)

# –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–º—ã—Å–ª—É
model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
sentence_embeddings = model.encode(sentences, convert_to_tensor=True)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    query_embedding = model.encode(query, convert_to_tensor=True)
    hits = util.semantic_search(query_embedding, sentence_embeddings, top_k=1)
    result = sentences[hits[0][0]['corpus_id']]
    await update.message.reply_text(result[:300])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 300 —Å–∏–º–≤–æ–ª–∞–º–∏

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
app.run_polling()
